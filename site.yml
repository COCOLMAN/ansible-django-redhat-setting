---
- name: 플레이북 튜토리얼
  hosts: ec2-instance1
  become: true
  tasks:
    - name: Add yum nginx repo
      yum_repository:
        name: nginx repo
        description: NGINX repo
        baseurl: http://nginx.org/packages/mainline/centos/7/$basearch/
        gpgcheck: no

    - name: Add yum ius repo
      yum_repository:
        name: ius repo
        description: IUS repo
        baseurl: https://centos7.iuscommunity.org/ius-release.rpm
        gpgcheck: no

    - name: Install git with yum
      yum:
        name: git

    - name: Install dependencies packages 
      yum:
        state:
          present
        name:
          - gcc
          - zlib-devel
          - bzip2
          - bzip2-devel
          - readline-devel
          - openssl-devel
          - sqlite
          - sqlite-devel
          - xz
          - xz-devel
          - libffi-devel

    - name: clone pyenv
      become: true
      become_user: ec2-user
      git:
        repo: 'https://github.com/pyenv/pyenv.git'
        dest: /home/{{ ansible_env.SUDO_USER }}/.pyenv

    - name: block in file
      blockinfile:
        path: /home/{{ ansible_env.SUDO_USER }}/.bashrc
        block: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          if command -v pyenv 1>/dev/null 2>&1; then
            eval "$(pyenv init -)"
          fi
          eval "$(pyenv virtualenv-init -)"

    - name: clone virtualenv
      become: true
      become_user: ec2-user
      git:
        repo: 'https://github.com/pyenv/pyenv-virtualenv.git'
        dest: /home/{{ ansible_env.SUDO_USER }}/.pyenv/plugins/pyenv-virtualenv

    - name: source
      shell: 'source /home/{{ ansible_env.SUDO_USER }}/.bashrc'  

#    - name: .pyenv permissions
#      file:
#        path: /home/ec2-user/.pyenv
#        recurse: yes
#        owner: ec2-user
#        group: ec2-user
#        state: directory

    - name: check python version
      become: true
      become_user: ec2-user
      shell: '. /home/ec2-user/.bashrc && /home/ec2-user/.pyenv/bin/pyenv versions'              
      register: check

    - name: debug
      debug:
        var: check.stdout_lines

    - name: pyenv install
      become: yes
      become_user: ec2-user
      shell: . /home/ec2-user/.bashrc && pyenv install 3.7.2
      when: '"  3.7.2" not in check.stdout_lines'

    - name: check virtualenv
      become: true
      become_user: ec2-user
      shell: '. /home/ec2-user/.bashrc && /home/ec2-user/.pyenv/bin/pyenv virtualenv env'              
      register: check
      ignore_errors: true

    - name: debug
      debug:
        var: check.stderr

    - name: virtualenv setting
      become: yes
      become_user: ec2-user
      shell: pyenv virtualenv 3.7.2 env
      when: '"already" not in check.stderr'
      # shell: . /home/ec2-user/.bashrc && pyenv virtualenv 3.7.2 env

    - name: Install django
      shell: /home/ec2-user/.pyenv/versions/env/bin/pip install django

    - name: Start Project Django
      become: yes
      become_user: ec2-user
      ignore_errors: true
      shell: /home/ec2-user/.pyenv/versions/env/bin/django-admin startproject mysite

    - name: modify settings.py | STATIC_ROOT
      blockinfile:
        path: /home/ec2-user/mysite/mysite/settings.py
        block:
          STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

    - name: modify settings.py | ALLOWED_HOST
      lineinfile:
        path: /home/ec2-user/mysite/mysite/settings.py
        regexp: 'ALLOWED_HOSTS'
        line: 'ALLOWED_HOSTS = ["*"]'

    - name: collect static
      become_user: ec2-user
      shell: /home/ec2-user/.pyenv/versions/env/bin/python /home/ec2-user/mysite/manage.py collectstatic --noinput
          
    - name: Install uwsgi
      shell: /home/ec2-user/.pyenv/versions/3.7.2/bin/pip install uwsgi

    - name: mkdir uwsgi directory
      file:
        path: /etc/uwsgi/sites
        state: directory
